#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2016 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  See LICENSE file for license information.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/passenger/cxxcodebuilder

require 'phusion_passenger/nginx/config_options'

def main
  set_indent_string '    '
  comment copyright_header_for(__FILE__)

  separator

  comment %q{
    CreateLocationConfig.c is automatically generated from CreateLocationConfig.c.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/nginx/config_options.rb.
    Edits to CreateLocationConfig.c will be lost.

    To update CreateLocationConfig.c:
      rake nginx

    To force regeneration of CreateLocationConfig.c:
      rm -f src/nginx_module/CreateLocationConfig.c
      rake src/nginx_module/CreateLocationConfig.c
  }

  separator

  function('void generated_set_conf_part(passenger_loc_conf_t  *conf)') do
    filter_eligible_options(LOCATION_CONFIGURATION_OPTIONS).each do |option|
      if option[:type] == :string
        add_code %Q{
          conf->#{struct_field_for(option)}.data = NULL;
          conf->#{struct_field_for(option)}.len  = 0;
        }
      elsif option[:type] == :integer || option[:type] == :flag
        add_code %Q{
          conf->#{struct_field_for(option)} = NGX_CONF_UNSET;
        }
      elsif option[:type] == :uinteger
        add_code %Q{
          conf->#{struct_field_for(option)} = NGX_CONF_UNSET_UINT;
        }
      elsif option[:type] == :string_array
        add_code %Q{
          conf->#{struct_field_for(option)} = NGX_CONF_UNSET_PTR;
        }
      elsif option[:type] == :string_keyval
        add_code %Q{
          conf->#{struct_field_for(option)} = NULL;
        }
      else
        raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
      end
    end
  end
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./ ||
      option[:auto_generate_nginx_create_code] == false
  end
end

def struct_field_for(option)
  if option.has_key?(:field)
    option[:field]
  else
    option[:name].sub(/^passenger_/, '')
  end
end

main
