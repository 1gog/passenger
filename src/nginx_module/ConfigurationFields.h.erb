/*
 *  Phusion Passenger - https://www.phusionpassenger.com/
 *  Copyright (c) 2010-2015 Phusion Holding B.V.
 *
 *  "Passenger", "Phusion Passenger" and "Union Station" are registered
 *  trademarks of Phusion Holding B.V.
 *
 *  See LICENSE file for license information.
 */

/*
 * ConfigurationFields.h is automatically generated from ConfigurationFields.h.erb,
 * using definitions from src/ruby_supportlib/phusion_passenger/nginx/config_options.rb.
 * Edits to ConfigurationFields.h will be lost.
 *
 * To update ConfigurationFields.h:
 *   rake nginx
 *
 * To force regeneration of ConfigurationFields.h:
 *   rm -f src/nginx_module/ConfigurationFields.h
 *   rake src/nginx_module/ConfigurationFields.h
 */
 
 typedef struct {
    ngx_http_upstream_conf_t upstream_config;
    ngx_array_t *flushes;
    ngx_array_t *headers_set_len;
    ngx_array_t *headers_set;
    ngx_hash_t   headers_set_hash;

    /** Raw HTTP header data for this location are cached here. */
    ngx_str_t    options_cache;
    ngx_str_t    env_vars_cache;

<%
require 'phusion_passenger/nginx/config_options'

def filter_eligible_options(options)
	return options.reject do |option|
		option[:alias_for] ||
			option.fetch(:field, true).nil? ||
			option[:field].to_s =~ /\./
	end
end

def struct_field_for(option)
	if option.has_key?(:field)
		return option[:field].to_s
	else
		return option[:name].sub(/^passenger_/, '')
	end
end

# Returns [definition_source, estimated_size_on_x86_64, field_name]
def definition_for(option)
	field = struct_field_for(option)
	case option[:type]
	when :string
		return ["ngx_str_t #{field}", 8 + 4, field]
	when :integer, :flag
		return ["ngx_int_t #{field}", 8, field]
	when :uinteger
		return ["ngx_uint_t #{field}", 8, field]
	when :string_array, :string_keyval
		return ["ngx_array_t *#{field}", 8, field];
	else
		raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
	end
end

eligible_options = filter_eligible_options(LOCATION_CONFIGURATION_OPTIONS)
definitions = eligible_options.map { |o| definition_for(o) }
# Sort the definitions by size in order to make the struct smaller.
# It's possible to make it even smaller with a smarter algorithm but for now
# I don't bother.
definitions.sort! do |d1, d2|
	if d1[1] == d2[1]
		# After sorting on size, sort alphabetically.
		d1[2] <=> d2[2]
	else
		d1[1] <=> d2[1]
	end
end
%>

<% for definition in definitions %>
	<%= definition[0] %>;
<% end %>


#if (NGX_HTTP_CACHE)
    ngx_http_complex_value_t cache_key;
#endif

    /************************************/
} passenger_loc_conf_t;