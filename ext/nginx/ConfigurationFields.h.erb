/*
 *  Phusion Passenger - https://www.phusionpassenger.com/
 *  Copyright (c) 2010-2013 Phusion
 *
 *  "Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.
 *
 *  See LICENSE file for license information.
 */

/*
 * ConfigurationFields.h is automatically generated from ConfigurationFields.h.erb,
 * using definitions from lib/phusion_passenger/nginx/config_options.rb.
 * Edits to MergeLocationConfig.c will be lost.
 *
 * To update ConfigurationFields.h:
 *   rake nginx
 *
 * To force regeneration of ConfigurationFields.h:
 *   rm -f ext/nginx/ConfigurationFields.h
 *   rake ext/nginx/ConfigurationFields.h
 */

<%
require 'phusion_passenger/nginx/config_options'

def filter_eligible_options(options)
	return options.reject do |option|
		option[:alias_for] ||
			option.fetch(:field, true).nil? ||
			option[:field].to_s =~ /\./
	end
end

def struct_field_for(option)
	if option.has_key?(:field)
		return option[:field]
	else
		return option[:name].sub(/^passenger_/, '')
	end
end

# Returns [definition_source, estimated_size_on_x86_64]
def definition_for(option)
	field = struct_field_for(option)
	case option[:type]
	when :string
		return ["ngx_str_t #{field}", 8 + 4]
	when :integer, :flag
		return ["ngx_int_t #{field}", 8]
	when :string_array, :string_keyval
		return ["ngx_array_t *#{field}", 8];
	else
		raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
	end
end

eligible_options = filter_eligible_options(LOCATION_CONFIGURATION_OPTIONS)
definitions = eligible_options.map { |o| definition_for(o) }
# Sort the definitions by size in order to make the struct smaller as possible.
# It's possible to make it even smaller with a smarter algorithm but for now
# I don't bother.
definitions.sort! do |d1, d2|
	d1[1] <=> d2[1]
end
%>

<% for definition in definitions %>
	<%= definition[0] %>;
<% end %>
