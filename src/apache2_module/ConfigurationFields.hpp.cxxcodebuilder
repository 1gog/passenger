#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2016 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  See LICENSE file for license information.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    ConfigurationFields.hpp is automatically generated from ConfigurationFields.hpp.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to ConfigurationFields.hpp will be lost.

    To update ConfigurationFields.hpp:
      rake apache2

    To force regeneration of ConfigurationFields.hpp:
      rm -f src/apache2_module/ConfigurationFields.hpp
      rake src/apache2_module/ConfigurationFields.hpp
  }

  separator

  struct 'GeneratedDirConfigPart' do
    add_code 'enum Threeway { ENABLED, DISABLED, UNSET };'

    definitions.each do |definition|
      separator
      comment(definition[3])
      field(definition[0])
    end
  end
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./
  end
end

def struct_field_for(option)
  if option.has_key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    result[0] = result[0..0].downcase
    result
  end
end

# Returns [definition_source, estimated_size_on_x86_64, description]
def definition_for(option)
  field = struct_field_for(option)
  case option[:type]
  when :string
    result = ["const char *#{field}", 8 + 4, field, option[:desc]]
  when :integer
    result = ["int #{field}", 4, field, option[:desc]]
  when :flag
    result = ["Threeway #{field}", 1, field, option[:desc]]
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
  result + [option[:desc]]
end

def definitions
  @definitions ||= begin
    eligible_options = filter_eligible_options(APACHE2_DIRECTORY_CONFIGURATION_OPTIONS)
    definitions = eligible_options.map { |o| definition_for(o) }
    # Sort the definitions by size in order to make the struct smaller.
    # It's possible to make it even smaller with a smarter algorithm but for now
    # I don't bother.
    definitions.sort! do |d1, d2|
      if d1[1] == d2[1]
        # After sorting on size, sort alphabetically.
        d1[2] <=> d2[2]
      else
        d1[1] <=> d2[1]
      end
    end
  end
end

main
