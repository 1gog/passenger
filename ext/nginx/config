ngx_feature=
ngx_feature_name=
ngx_feature_run=no
ngx_feature_incs=
ngx_feature_path=
ngx_feature_libs=
ngx_feature_test=
. auto/feature

nginx_version=`grep 'NGINX_VERSION ' src/core/nginx.h | awk '{ print $3 }' | sed 's/"//g'`
nginx_major_version=`echo "$nginx_version" | cut -d . -f 1`
nginx_minor_version=`echo "$nginx_version" | cut -d . -f 2`
nginx_micro_version=`echo "$nginx_version" | cut -d . -f 3`
CFLAGS="$CFLAGS -DPASSENGER_NGINX_MAJOR_VERSION=\"$nginx_major_version\""
CFLAGS="$CFLAGS -DPASSENGER_NGINX_MINOR_VERSION=\"$nginx_minor_version\""
CFLAGS="$CFLAGS -DPASSENGER_NGINX_MICRO_VERSION=\"$nginx_micro_version\""

if [ $ngx_found = yes ]; then
    ngx_addon_name=ngx_http_passenger_module
    HTTP_MODULES="$HTTP_MODULES ngx_http_passenger_module"
    NGX_ADDON_SRCS="$NGX_ADDON_SRCS \
        ${ngx_addon_dir}/ngx_http_passenger_module.c \
        ${ngx_addon_dir}/Configuration.c \
        ${ngx_addon_dir}/ContentHandler.c"
    NGX_ADDON_DEPS="$NGX_ADDON_DEPS \
        ${ngx_addon_dir}/Configuration.h \
        ${ngx_addon_dir}/ContentHandler.h \
        ${ngx_addon_dir}/ngx_http_passenger_module.h"
    CORE_LIBS="$CORE_LIBS  \
        ${ngx_addon_dir}/libpassenger_common.a \
        ${ngx_addon_dir}/libboost_oxt.a \
        -lstdc++"
else
    cat << END
$0: error: unable to configure the ngx_http_passenger_module.
END
    exit 1
fi


# Additional configuration
# XXX TODO (must be configurable via --with-<option>)

# Path where to store temporary files used for buffering
NGX_HTTP_PASSENGER_TEMP_PATH=$NGX_PREFIX/wsgi_temp

have=NGX_HTTP_PASSENGER_TEMP_PATH value="\"$NGX_HTTP_PASSENGER_TEMP_PATH\""
. auto/define
