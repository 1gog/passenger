#!/usr/bin/env ruby
#  Phusion Passenger - http://www.modrails.com/
#  Copyright (c) 2009 Phusion
#
#  "Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.
#
#  See LICENSE file for license information.

source_root = File.expand_path(File.dirname(__FILE__) + "/..")
$LOAD_PATH.unshift("#{source_root}/lib")
require 'phusion_passenger'
require 'optparse'

LOGGING_AGENT = "#{PhusionPassenger::AGENTS_DIR}/PassengerLoggingAgent"
FEEDBACK_FD = 3

def parse_options
	options = {
		:dir  => '/var/log/passenger-analytics',
		:host => '127.0.0.1',
		:port => '4395',
		:log_level => 0
	}
	parser = OptionParser.new do |opts|
		nl = "\n#{' ' * 37}"
		opts.banner = "Usage: passenger-logging-agent [options]"
		opts.separator ""
		
		opts.separator "Normal options:"
		opts.on("-d", "--dir DIRECTORY", String, "Location to store the log data to#{nl}" +
			"(default: #{options[:dir]})") do |value|
			options[:dir] = value
		end
		opts.on("--host HOSTNAME", String, "Bind on the given host name#{nl}" +
			"(default:#{options[:host]})") do |value|
			options[:host] = value
		end
		opts.on("-p", "--port NUMBER", Integer, "Bind on the given port number#{nl}" +
			"(default: #{options[:port]})") do |value|
			options[:port] = value
		end
		opts.on("-S", "--socket FILENAME", String, "Bind on the given Unix domain " +
			"socket.#{nl}Overrides --host and --port") do |value|
			options[:socket] = value
		end
		opts.on("--debug", "Enable debugging output") do
			options[:log_level] = 1
		end
		opts.on("-h", "--help", "Show this help") do
			options[:help] = true
		end

		opts.separator ""
		opts.separator "Installation options:"
		opts.on("--install", "Install the logging agent") do
			options[:install] = true
		end
		opts.on("--auto", "When installing, automatically confirm#{nl}" <<
		        "'Press ENTER to continue' prompts.") do
			options[:auto] = true
		end
	end
	begin
		parser.parse!
	rescue OptionParser::ParseError => e
		puts e
		puts
		puts "Please see '--help' for valid options."
		exit 1
	end
	if options[:help]
		puts parser
		exit
	end
	return options
end

def start
	options = parse_options
	if options[:install]
		require 'phusion_passenger/logging_agent/installer'
		PhusionPassenger::LoggingAgent::Installer.new(options).start
	elsif !File.exist?(LOGGING_AGENT)
		STDERR.puts "*** ERROR: The Phusion Passenger Logging Agent isn't " +
			"properly compiled/installed. Please run `passenger-logging-agent " +
			"--install` first."
		exit 1
	else
		args = [
			"fire_and_forget", "true",
			"analytics_log_dir", options[:dir],
			"log_level", options[:log_level],
			"logging_agent_password", ""
		]
		
		args << "logging_agent_address"
		if options[:socket]
			args << "unix:#{options[:socket]}"
		else
			args << "tcp://#{options[:host]}:#{options[:port]}"
		end
		
		require 'phusion_passenger/message_channel'
		require 'socket'
		
		a, b = UNIXSocket.pair
		a.setsockopt(Socket::SOL_SOCKET, Socket::Constants::SO_SNDBUF, 128 * 8)
		b.setsockopt(Socket::SOL_SOCKET, Socket::Constants::SO_RCVBUF, 128 * 8)
		
		if a.fileno != FEEDBACK_FD
			feedback_fd = IO.new(FEEDBACK_FD)
			feedback_fd.reopen(a)
			a.close
		end
		
		channel = PhusionPassenger::MessageChannel.new(b)
		channel.write("VariantMap", *args)
		channel.close
		
		exec(LOGGING_AGENT)
	end
end

start
