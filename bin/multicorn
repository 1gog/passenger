#!/usr/bin/env ruby
#  Phusion Passenger - http://www.modrails.com/
#  Copyright (c) 2009 Phusion
#
#  "Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

PASSENGER_ROOT = File.expand_path(File.dirname(__FILE__) << "/..")
$LOAD_PATH.unshift("#{PASSENGER_ROOT}/lib")
require 'rubygems' rescue nil
require 'optparse'
require 'socket'
require 'thread'
require 'erb'
require 'tempfile'
require 'phusion_passenger/packaging'

begin
	require 'daemon_controller'
	begin
		require 'daemon_controller/version'
	rescue LoadError
		STDERR.puts "*** Your version of daemon_controller is too old. You must install 0.2.3 or later. Please upgrade:"
		STDERR.puts
		STDERR.puts " sudo gem uninstall FooBarWidget-daemon_controller"
		STDERR.puts " sudo gem install daemon_controller"
		exit 1
	end
rescue LoadError
	STDERR.puts "*** Please install daemon_controller first: sudo gem install daemon_controller"
	exit 1
end
begin
	require 'file/tail'
rescue LoadError
	STDERR.puts "*** Please install file-tail first: sudo gem install file-tail"
	exit 1
end

module PhusionPassenger

class Multicorn
	def self.run_command(argv)
		new.run_command(argv)
	end
	
	def initialize
		@options = {}
	end
	
	def run_command(argv)
		command = argv[0]
		if command.nil? || command == '-h' || command == '--help'
			command_help
			exit
		elsif command == '-v' || command == '--version'
			command_version
			exit
		elsif respond_to?("command_#{command}", true)
			@args = argv[1..-1]
			begin
				send("command_#{command}")
			rescue OptionParser::ParseError => e
				puts e
				puts
				puts "Please see '--help' for valid options."
				exit 1
			end
		else
			STDERR.puts "Unknown command '#{command}'. Please type --help for options."
			exit 1
		end
	end

private
	#### Commands ####
	
	def command_start
		description = "Starts Multicorn in order to serve a Ruby web application."
		@options = {
			:address => '0.0.0.0',
			:port => 3000,
			:env  => ENV['RAILS_ENV'] || ENV['RACK_ENV'] || 'development'
		}
		parse_options!("start [directory]", description) do |opts|
			opts.on("-a", "--address HOST", String,
				wrap_desc("Bind to HOST address (default: #{@options[:address]})")) do |value|
				@options[:address] = value
				@options[:tcp] = true
			end
			opts.on("-p", "--port NUMBER", Integer,
				wrap_desc("Use the given port number (default: #{@options[:port]})")) do |value|
				@options[:port] = value
				@options[:tcp] = true
			end
			opts.on("-S", "--socket FILE", String,
				wrap_desc("Bind to Unix domain socket instead of TCP socket")) do |value|
				@options[:socket_file] = value
			end
			opts.on("-e", "--environment ENV", String,
				wrap_desc("Framework environment (default: #{@options[:env]})")) do |value|
				@options[:port] = value
			end
			opts.on("-d", "--daemonize",
				wrap_desc("Daemonize into the background")) do
				@options[:daemonize] = true
			end
		end
		if @options[:tcp] && @options[:socket_file]
			STDERR.puts "You cannot specify both --address/--port and --socket. Please choose either one."
			exit 1
		end
		
		ensure_nginx_installed
		determine_various_resource_locations
		determine_apps_to_serve
		
		create_nginx_controller
		begin
			@nginx.start
		rescue DaemonController::AlreadyStarted
			begin
				pid = @nginx.pid
			rescue SystemCallError, IOError
				pid = nil
			end
			if pid
				STDERR.puts "*** ERROR: Multicorn is already running on PID #{pid}."
			else
				STDERR.puts "*** ERROR: Multicorn is already running."
			end
			exit 1
		rescue DaemonController::StartError => e
			STDERR.puts "*** ERROR: could not start Multicorn Nginx core:"
			STDERR.puts e
			exit 1
		ensure
			File.unlink(@config_filename) rescue nil
		end
		
		puts "=============== Multicorn web server started ==============="
		puts "PID file: #{@options[:pid_file]}"
		puts "Log file: #{@options[:log_file]}"
		if @apps.size > 1
			puts
			if @options[:socket_file]
				puts "Serving these applications:"
			else
				puts "Serving these applications on #{@options[:address]} port #{@options[:port]}:"
			end
			puts " Host name                     Directory"
			puts "------------------------------------------------------------"
			@apps.each do |app|
				printf " %-26s    %s\n", app[:server_name], app[:root]
			end
		else
			puts "Accessible via: #{listen_url}"
		end
		puts
		if @options[:daemonize]
			puts "Serving in the background as a daemon."
		else
			puts "You can stop Multicorn by pressing Ctrl-C."
		end
		puts "============================================================"
		
		daemonize if @options[:daemonize]
		watch_directories_in_background if @apps.size > 1
		watch_log_files_in_background if !@options[:daemonize]
		begin
			wait_until_nginx_has_exited
		rescue Interrupt
			stop_nginx
			exit 2
		rescue SignalException => signal
			stop_nginx
			if signal.message == 'SIGINT' || signal.message == 'SIGTERM'
				exit 2
			else
				raise
			end
		rescue Exception => e
			stop_nginx
			raise
		end
	end
	
	def command_stop
		determine_various_resource_locations(false)
		create_nginx_controller
		begin
			running = @nginx.running?
		rescue SystemCallError, IOError
			running = false
		end
		if running
			@nginx.stop
		else
			STDERR.puts "According to the PID file '#{@options[:pid_file]}', Multicorn doesn't seem to be running."
			STDERR.puts
			STDERR.puts "If you know that Multicorn is running then you've probably specified the wrong PID " <<
				"file. In that case, please specify the right one with --pid-file."
			exit 1
		end
	end
	
	def command_status
		determine_various_resource_locations(false)
		create_nginx_controller
		begin
			running = @nginx.running?
			pid = @nginx.pid
		rescue SystemCallError, IOError
			running = false
		end
		if running
			puts "Multicorn is running on PID #{pid}."
		else
			puts "Multicorn is not running."
		end
	end
	
	def command_help
		puts "Available commands:"
		puts
		puts "  multicorn start       Start Multicorn."
		puts "  multicorn stop        Stop a running Multicorn instance."
		puts "  multicorn status      Show the status of a running Multicorn instance."
		puts
		puts "Special options:"
		puts
		puts "  multicorn --help      Display this help message."
		puts "  multicorn --version   Display version number."
		puts
		puts "For more information about a specific command, please type 'multicorn <COMMAND> --help', e.g. 'multicorn start --help'."
	end
	
	def command_version
		require 'phusion_passenger/constants'
		puts "Phusion Passenger version #{VERSION_STRING}"
		puts
		puts '"Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.'
	end
	
	
	#### Helper methods ####
	
	def parse_options!(command_name, description = nil)
		help = false
		parser = OptionParser.new do |opts|
			opts.banner = "Usage: multicorn #{command_name} [options]"
			opts.separator description if description
			opts.separator " "
			opts.separator "Options:"
			yield opts
			opts.on("-h", "--help", "Show this help message") do
				help = true
			end
		end
		parser.parse!(@args)
		if help
			puts parser
			exit 0
		end
	end
	
	# Word wrap the given option description text so that it is formatted
	# nicely in the --help output.
	def wrap_desc(description_text)
		line_prefix = "\n" << (' ' * 37)
		col = 43
		result = description_text.gsub(/(.{1,#{col}})( +|$\n?)|(.{1,#{col}})/, "\\1\\3#{line_prefix}")
		result.strip!
		return result
	end
	
	def listen_url
		if @options[:socket_file]
			return @options[:socket_file]
		else
			result = "http://#{@options[:address]}"
			if @options[:port] != 80
				result << ":#{@options[:port]}"
			end
			result << "/"
			return result
		end
	end
	
	def nginx_listen_address
		if @options[:socket_file]
			return "unix:" + File.expand_path(@options[:socket_file])
		else
			return "#{@options[:address]}:#{@options[:port]}"
		end
	end
	
	def looks_like_app_directory?(dir)
		return File.exist?("#{dir}/config/environment.rb") ||
			File.exist?("#{dir}/config.ru") ||
			File.exist?("#{dir}/passenger_wsgi.py")
	end
	
	def ensure_nginx_installed
		# Also check whether all development tools and dependencies are installed!
	end
	
	def filename_to_server_name(filename)
		return File.basename(filename)
	end
	
	def ensure_directory_exists(dir)
		if !File.exist?(dir)
			Dir.mkdir(dir)
		end
	end
	
	def determine_various_resource_locations(create_subdirs = true)
		if @args.empty?
			if looks_like_app_directory?(".")
				@options[:pid_file] ||= File.expand_path("tmp/pids/multicorn.pid")
				@options[:log_file] ||= File.expand_path("log/multicorn.log")
				if create_subdirs
					ensure_directory_exists(File.dirname(@options[:pid_file]))
					ensure_directory_exists(File.dirname(@options[:log_file]))
				end
			else
				@options[:pid_file] ||= File.expand_path("multicorn.pid")
				@options[:log_file] ||= File.expand_path("multicorn.log")
			end
		else
			@options[:pid_file] ||= File.expand_path(File.join(@args[0], "multicorn.pid"))
			@options[:log_file] ||= File.expand_path(File.join(@args[0], "multicorn.log"))
		end
	end
	
	def determine_apps_to_serve
		@apps = []
		if @args.empty?
			if looks_like_app_directory?(".")
				@apps << {
					:server_name => "_",
					:root => File.expand_path(".")
				}
			else
				Dir["./*"].each do |entry|
					if looks_like_app_directory?(entry)
						server_name = filename_to_server_name(entry)
						@apps << {
							:server_name => server_name,
							:root => File.expand_path(entry)
						}
					end
				end
			end
		else
			@args.each do |arg|
				if looks_like_app_directory?(arg)
					server_name = filename_to_server_name(arg)
					@apps << {
						:server_name => server_name,
						:root => File.expand_path(arg)
					}
				else
					Dir["#{arg}/*"].each do |entry|
						if looks_like_app_directory?(entry)
							server_name = filename_to_server_name(entry)
							@apps << {
								:server_name => server_name,
								:root => File.expand_path(entry)
							}
						end
					end
				end
			end
		end
	end
	
	def create_nginx_config_file(filename = nil)
		if filename
			config_file = File.open(filename, 'w')
		else
			config_file = Tempfile.new('nginx')
		end
		@config_filename = config_file.path
		begin
			config_file.chmod(0644)
			template_filename = File.join(LIBDIR, "phusion_passenger", "templates", "multicorn.conf.erb")
			erb = ERB.new(File.read(template_filename))
			config_file.write(erb.result(binding))
		ensure
			config_file.close
		end
	end
	
	def determine_nginx_start_command
		return "/Users/hongli/Projects/nginx-0.7.62/objs/nginx -c '#{@config_filename}'"
	end
	
	def ping_nginx
		if @options[:socket_file]
			UNIXSocket.new(@options[:socket_file])
		else
			TCPSocket.new(@options[:address], @options[:port])
		end
	end
	
	def create_nginx_controller
		@nginx = DaemonController.new(
			:identifier    => 'Nginx',
			:before_start  => method(:create_nginx_config_file),
			:start_command => method(:determine_nginx_start_command),
			:ping_command  => method(:ping_nginx),
			:pid_file      => @options[:pid_file],
			:log_file      => @options[:log_file],
			:timeout       => 25
		)
		@nginx_mutex = Mutex.new
	end
	
	def daemonize
		pid = fork
		if pid
			# Parent
			exit!
		else
			# Child
			trap "HUP", "IGNORE"
			STDIN.reopen("/dev/null", "r")
			STDOUT.reopen(@options[:log_file], "a")
			STDERR.reopen(@options[:log_file], "a")
			STDOUT.sync = true
			STDERR.sync = true
			Process.setsid
		end
	end
	
	def directory_mtimes
		if @args.empty?
			dirs = ["."]
		else
			dirs = @args.sort
		end
		dirs.map! do |dir|
			File.stat(dir).mtime
		end
		return dirs
	end
	
	def watch_directories_in_background
		Thread.new do
			old_mtimes = directory_mtimes
			while true
				sleep 2
				new_mtimes = directory_mtimes
				if old_mtimes != new_mtimes
					old_mtimes = new_mtimes
					
					puts "*** #{Time.now}: redeploying applications ***"
					determine_apps_to_serve
					begin
						pid = @nginx.pid
					rescue SystemCallError, IOError
						next
					end
					create_nginx_config_file(@config_filename)
					begin
						Process.kill('HUP', pid) rescue nil
						
						puts "Now serving these applications:"
						puts " Host name                     Directory"
						puts "------------------------------------------------------------"
						@apps.each do |app|
							printf " %-26s    %s\n", app[:server_name], app[:root]
						end
						puts "------------------------------------------------------------"
						
						# Wait a short period for Nginx to reload its config
						# before deleting the config file.
						sleep 3
					ensure
						File.unlink(@config_filename) rescue nil
					end
				end
			end
		end
	end
	
	def watch_log_file(log_file)
		if File.exist?(log_file)
			backward = 0
		else
			# File::Tail bails out if the file doesn't exist, so wait until it exists.
			while !File.exist?(log_file)
				sleep 1
			end
			backward = 10
		end
		
		File::Tail::Logfile.open(log_file, :backward => backward) do |log|
			log.interval = 0.1
			log.max_interval = 1
			log.tail do |line|
				@stdout_mutex.synchronize do
					STDOUT.write(line)
					STDOUT.flush
				end
			end
		end
	end
	
	def watch_log_files_in_background
		@stdout_mutex = Mutex.new
		@apps.each do |app|
			Thread.new do
				watch_log_file("#{app[:root]}/log/#{@options[:env]}.log")
			end
		end
	end
	
	def wait_until_nginx_has_exited
		# Since Nginx is not our child process (it daemonizes or we daemonize)
		# we cannot use Process.waitpid to wait for it. A busy-sleep-loop with
		# Process.kill(0, pid) isn't very efficient. Instead we do this:
		#
		# Connect to Nginx and wait until Nginx disconnects the socket because of
		# timeout. Keep doing this until we can no longer connect.
		while true
			if @options[:socket_file]
				socket = UNIXSocket.new(@options[:socket_file])
			else
				socket = TCPSocket.new(@options[:address], @options[:port])
			end
			begin
				socket.read rescue nil
			ensure
				socket.close rescue nil
			end
		end
	rescue Errno::ECONNREFUSED, Errno::ECONNRESET
	end
	
	def stop_nginx
		@nginx_mutex.synchronize do
			STDOUT.write("Stopping web server...")
			STDOUT.flush
			@nginx.stop
			STDOUT.puts " done"
			STDOUT.flush
		end
	end
end

end # module PhusionPassenger

Thread.abort_on_exception = true
PhusionPassenger::Multicorn.run_command(ARGV)