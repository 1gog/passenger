/*
 *  Phusion Passenger - https://www.phusionpassenger.com/
 *  Copyright (c) 2010-2014 Phusion
 *
 *  "Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.
 *
 *  See LICENSE file for license information.
 */

/*
 * CreateLocationConfig.c is automatically generated from CreateLocationConfig.c.erb,
 * using definitions from lib/phusion_passenger/nginx/config_options.rb.
 * Edits to CreateLocationConfig.c will be lost.
 *
 * To update CreateLocationConfig.c:
 *   rake nginx
 *
 * To force regeneration of CreateLocationConfig.c:
 *   rm -f ext/nginx/CreateLocationConfig.c
 *   rake ext/nginx/CreateLocationConfig.c
 */

<%
require 'phusion_passenger/nginx/config_options'

def filter_eligible_options(options)
	return options.reject do |option|
		option[:alias_for] ||
			option.fetch(:field, true).nil? ||
			option[:field].to_s =~ /\./ ||
			option[:auto_generate_nginx_create_code] == false
	end
end

def struct_field_for(option)
	if option.has_key?(:field)
		return option[:field]
	else
		return option[:name].sub(/^passenger_/, '')
	end
end
%>

<% for option in filter_eligible_options(LOCATION_CONFIGURATION_OPTIONS) %>
	<% if option[:type] == :string %>
		conf-><%= struct_field_for(option) %>.data = NULL;
		conf-><%= struct_field_for(option) %>.len  = 0;
	<% elsif option[:type] == :integer || option[:type] == :flag %>
		conf-><%= struct_field_for(option) %> = NGX_CONF_UNSET;
	<% elsif option[:type] == :uinteger %>
		conf-><%= struct_field_for(option) %> = NGX_CONF_UNSET_UINT;
	<% elsif option[:type] == :string_array %>
		conf-><%= struct_field_for(option) %> = NGX_CONF_UNSET_PTR;
	<% elsif option[:type] == :string_keyval %>
		conf-><%= struct_field_for(option) %> = NULL;
	<% else %>
		<% raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}" %>
	<% end %>
<% end %>
