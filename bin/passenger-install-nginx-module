#!/usr/bin/env ruby
#  Phusion Passenger - http://www.modrails.com/
#  Copyright (C) 2009  Phusion
#
#  Phusion Passenger is a trademark of Hongli Lai & Ninh Bui.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

PASSENGER_ROOT = File.expand_path(File.dirname(__FILE__) << "/..")
$LOAD_PATH.unshift("#{PASSENGER_ROOT}/lib")
$LOAD_PATH.unshift("#{PASSENGER_ROOT}/ext")

require 'optparse'
require 'fileutils'
require 'passenger/platform_info'
require 'passenger/dependencies'
require 'passenger/abstract_installer'
include PlatformInfo

class Installer < Passenger::AbstractInstaller
	include Passenger
	
	NGINX_VERSION = "0.6.34"
	
	def dependencies
		return [
			Dependencies::GCC,
			Dependencies::Ruby_DevHeaders,
			Dependencies::Ruby_OpenSSL,
			Dependencies::RubyGems,
			Dependencies::Rake,
			Dependencies::FastThread,
			Dependencies::Rack
		]
	end
	
	def install!
		Dir.chdir(PASSENGER_ROOT)
		show_welcome_screen
		check_dependencies || exit(1)
		
		check_write_permission_to_passenger_root || exit(1)
		
		if should_we_download_and_install_nginx_automatically?
			nginx_source_dir = download_and_extract_nginx
			if nginx_source_dir.nil?
				show_possible_solutions_for_download_and_extraction_problems
				exit(1)
			end
			nginx_prefix = ask_for_nginx_install_prefix
			extra_nginx_configure_flags = nil
		else
			nginx_source_dir = ask_for_nginx_source_dir
			nginx_prefix = ask_for_nginx_install_prefix
			extra_nginx_configure_flags = ask_for_extra_nginx_configure_flags(nginx_prefix)
		end
		check_whether_we_can_write_to(nginx_prefix) || exit(1)
		nginx_config_already_exists_before_installing = nginx_config_exists?(nginx_prefix)
		if install_nginx(nginx_source_dir, nginx_prefix, extra_nginx_configure_flags)
			if nginx_config_already_exists_before_installing
				show_passenger_config_snippets
			else
				insert_passenger_config_snippets
			end
			show_deployment_example
		else
			show_possible_solutions_for_compilation_and_installation_problems
			exit(1)
		end
	ensure
		reset_terminal_colors
	end

private
	def show_welcome_screen
		render_template 'nginx/welcome', :version => VERSION_STRING
		wait
	end
	
	def check_write_permission_to_passenger_root
		File.new("__test__.txt", "w").close
		return true
	rescue
		puts
		line
		if Process.uid == 0
			render_template 'no_write_permission_to_passenger_root'
		else
			render_template 'run_installer_as_root'
		end
		return false
	ensure
		File.unlink("__test__.txt") rescue nil
	end
	
	def should_we_download_and_install_nginx_automatically?
		render_template 'nginx/query_download_and_install',
			:nginx_version => NGINX_VERSION
		puts
		choice = prompt("Enter your choice (1 or 2) or press Ctrl-C to abort") do |input|
			if input == "1" || input == "2"
				true
			elsif input.empty?
				color_puts "<red>No choice has been given.</red>"
				false
			else
				color_puts "<red>'#{input}' is not a valid choice.</red>"
				false
			end
		end
		return choice == "1"
	end
	
	def download_and_extract_nginx
		basename = "nginx-#{NGINX_VERSION}.tar.gz"
		url = "http://sysoev.ru/nginx/#{basename}"
		File.unlink("/tmp/#{basename}") rescue nil
		FileUtils.rm_rf("/tmp/nginx-#{NGINX_VERSION}")
		
		if PlatformInfo.find_command("wget")
			downloaded = sh("wget", "-O", "/tmp/#{basename}", url)
		else
			downloaded = sh("curl", url, "-o", "/tmp/#{basename}")
		end
		
		if downloaded
			Dir.chdir("/tmp") do
				if sh("tar", "xzvf", basename)
					return "/tmp/nginx-#{NGINX_VERSION}"
				else
					return nil
				end
			end
		else
			return nil
		end
	rescue Interrupt
		exit 2
	end
	
	def show_possible_solutions_for_download_and_extraction_problems
		puts
		line
		puts
		render_template "nginx/possible_solutions_for_download_and_extraction_problems"
		puts
	end
	
	def ask_for_nginx_install_prefix
		puts
		line
		puts
		color_puts "<banner>Where do you want to install Nginx to?</banner>"
		puts
		return prompt("Please specify a prefix directory") do |input|
			if input =~ %r(/)
				true
			else
				color_puts "<red>Please specify an absolute path.</red>"
				false
			end
		end
	end
	
	def ask_for_nginx_source_dir
		puts
		line
		puts
		color_puts "<banner>Where is your Nginx source code located?</banner>"
		puts
		return prompt("Please specify the directory") do |input|
			if input =~ %r(/)
				if File.exist?("#{input}/src/core/nginx.c")
					true
				else
					color_puts "<red>'#{input}' does not look like an Nginx source directory.</red>"
					false
				end
			else
				color_puts "<red>Please specify an absolute path.</red>"
				false
			end
		end
	end
	
	def ask_for_extra_nginx_configure_flags(prefix)
		done = false
		while !done
			puts
			line
			puts
			render_template 'nginx/ask_for_extra_configure_flags',
				:command => build_nginx_configure_command(prefix)
			puts
			extra_args = prompt "Extra arguments to pass to configure script"
			
			puts
			line
			puts
			render_template 'nginx/confirm_extra_configure_flags',
				:command => build_nginx_configure_command(prefix, extra_args)
			puts
			answer = prompt("Is this what you want? (yes/no) [default=yes]") do |input|
				if input.empty? || input == "yes" || input == "no"
					true
				else
					color_puts "<red>Please enter 'yes' or 'no'.</red>"
					false
				end
			end
			done = answer.empty? || answer == "yes"
		end
		return extra_args
	end
	
	def check_whether_we_can_write_to(dir)
		FileUtils.mkdir_p(dir)
		File.new("#{dir}/__test__.txt", "w").close
		return true
	rescue
		puts
		line
		if Process.uid == 0
			render_template 'nginx/cannot_write_to_dir', :dir => dir
		else
			render_template 'nginx/run_installer_as_root', :dir => dir
		end
		return false
	ensure
		File.unlink("#{dir}/__test__.txt") rescue nil
	end
	
	def nginx_config_exists?(prefix)
		return File.exist?("#{prefix}/conf/nginx.conf") ||
		       File.exist?("#{prefix}/etc/nginx.conf")
	end
	
	def install_nginx(source_dir, prefix, extra_configure_flags)
		Dir.chdir(source_dir) do
			if !sh(build_nginx_configure_command(prefix, extra_configure_flags)) ||
			   !sh("make")
			   !sh("make install")
				return false
			end
		end
		if !sh("rake nginx")
			return false
		end
		return true
	end
	
	def show_deployment_example
		puts
		line
		render_template 'nginx/deployment_example',
			:users_guide => USERS_GUIDE,
			:phusion_website => PHUSION_WEBSITE,
			:passenger_website => PASSENGER_WEBSITE
	end
	
	def show_possible_solutions_for_compilation_and_installation_problems
		puts
		line
		render_template 'possible_solutions_for_compilation_and_installation_problems',
			:users_guide => USERS_GUIDE,
			:passenger_website => PASSENGER_WEBSITE
	end
	
	def build_nginx_configure_command(prefix, extra_configure_flags = nil)
		return "./configure --prefix='#{prefix}' #{extra_configure_flags}".strip
	end
end

options = {}
parser = OptionParser.new do |opts|
	opts.banner = "Usage: passenger-install-nginx-module [options]"
	opts.separator ""
	
	opts.separator "Options:"
	#opts.on("-a", "--auto", String, "Automatically build the Apache module,\n" <<
	#        "#{' ' * 37}without interactively asking for user\n" <<
	#        "#{' ' * 37}input.") do
	#	options[:auto] = true
	#end
end
begin
	parser.parse!
rescue OptionParser::ParseError => e
	puts e
	puts
	puts "Please see '--help' for valid options."
	exit 1
end

Installer.new(options).start
